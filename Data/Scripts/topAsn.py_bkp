import commands
import sys
import pandas as pd
import json
import operator
asnFile_sent = open("asnFile_sent","w")
asnInfo_sent = open("asnInfoFile_sent","w")

asnFile_recv = open("asnFile_recv","w")
asnInfo_recv = open("asnInfoFile_recv","w")

def getMax_sent(dataDict):
  returnList = []
  tup1 = []
  sortedDict = sorted(dataDict.items(), key=operator.itemgetter(1), reverse=True)
  count =1
  for ip,values in sortedDict:
    if count > 10:
      break

    myIp = ip.replace("x","1")
    cmd = "whois -h whois.radb.net "+myIp+" | grep 'origin' "
    ASN = commands.getoutput(cmd)
    if len(myIp) ==0:
    	ASN = ""
    if(ASN ==""):
      continue
    else:
      myAsn = ASN.split("\n")[0].split("AS")[1]
    if myAsn not in tup1:
      tup1.append(myAsn)
      newList = [myAsn , ip, values]
      asnInfo_sent.write(str(newList[0]) + " " + str(newList[1]) + " "+str(newList[2])+"\n")
      returnList.append(newList)
      count = count+1
  asnInfo_sent.close()
  return tup1
  

def topTalk(filename):
  with open(filename) as data_file:
    data = json.load(data_file)

  ids = set()
  output = {}
  i=0
  for entry in data["hits"]["hits"]:
    if entry["_index"] == ".kibana":
      continue
    inner = {}
    uniqueId = entry["_id"]
    src_ipAddress = entry["_source"]["meta"]["src_ip"] 
    dst_ipAddress = entry["_source"]["meta"]["dst_ip"]
    #mb_sent = (entry["_source"]["values"]["num_bits"])/(8*1024*1024)
    bits_sent = (entry["_source"]["values"]["num_bits"])
    

    if uniqueId in ids:
      print "Duplicate flow ID found "
    else:
      ids.add(uniqueId)

    i+=1
    if(output.has_key(src_ipAddress)):
      if(output.get(src_ipAddress).has_key(dst_ipAddress)):
        inner[dst_ipAddress] = bits_sent + output.get(src_ipAddress).get(dst_ipAddress)
        output[src_ipAddress][dst_ipAddress] = inner[dst_ipAddress]
      else:
        inner[dst_ipAddress] = bits_sent
        output[src_ipAddress][dst_ipAddress] = inner[dst_ipAddress]
    else:
        inner[dst_ipAddress] = bits_sent
        output[src_ipAddress] = inner

# To find the src dst pair with max bits exchanged
  maxDataExchanged = -1
  finalSrc = ""
  finalDst = ""
  srcDict = {} 
  dstDict = {} #srcDict will hold scr + data sent and dstDict will hold dst + data recieved
  for src, values in output.iteritems():
    maxSrc=0
    for dst, dataInMb in values.iteritems():
      #print "-- src " + src + " dst " + dst + " value " + str(dataInMb) + "\n"
      maxSrc = maxSrc + dataInMb
      if(dst in dstDict):
        dstDict[dst] = dstDict[dst]+dataInMb
      else:
        dstDict[dst] = dataInMb
      if dataInMb > maxDataExchanged:
        finalSrc = src
        finalDst = dst
        maxDataExchanged = dataInMb
    srcDict[src] = maxSrc

  print "Src dict -- "
  print srcDict
  print "------"*10
  print "Destdict -- "
  print dstDict
  finalList = getMax_sent(srcDict)
  print "finalist_sent"
  print(finalList)
  asnFile_sent.write(str(finalList))
  asnFile_sent.close()
  
if __name__ == "__main__":
  topTalk("nflow")

